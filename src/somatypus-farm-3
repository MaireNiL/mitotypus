#!/bin/bash

# SOMATYPUS: A PLATYPUS-BASED VARIANT CALLING PIPELINE FOR CANCER DATA
# Adrian Baez-Ortega, Transmissible Cancer Group, University of Cambridge
# 2016

# somatypus
# Core pipeline script

# INPUT
# -i: path to folder containing the input BAM files (accompanied by BAI indices)
# -g: path to genome FASTA (must have FAI index)
# -o: path to global output folder
# -r: path to file of regions in chr:start-end format (optional)
# -c: number of CPUs (processes) for Platypus (*SHOULD NOT EXCEED 8 DUE TO BUG*) (optional)
# -e: extra options for Platypus (within quotes, separated by spaces) (optional)



VERSION=1.3
 
# check_file()
# Checks if a file exists and is not empty. In that case, it displays an error message and exits
# Used for checking the output of each step
check_file() {

    if [ ! -s $1 ]; then
        echo -e "\nERROR: Output file $1 was not correctly generated. Please check the logs folder for more information.\n" >&2
        exit 1
    fi
    
}

# 3) split_calls()
# Splits multi-allelic calls and MNPs in individual Platypus VCFs into bi-allelic SNVs
split_calls() {

    # Create directory for output split files
    mkdir -p $OUTDIR/3_individual_split
    mkdir -p $OUTDIR/logs/3_individual_split

    # For each individual VCF, split calls
    for FILE in `ls $OUTDIR/1-2_individual_calls/platypusVariants_*`; do
    bsub -o $OUTDIR/logs/3_individual_split/log.%J \
              -e $OUTDIR/logs/3_individual_split/err.%J \
              -q normal \
              -n $CPUS \
              -R 'span[hosts=1] select[mem>=10000] rusage[mem=10000]' -M10000 \
        "Somatypus_SplitMA-MNVs.py $FILE >> $OUTDIR/logs/3_split.log"
        #mv "${FILE%.*}".split.vcf $OUTDIR/3_individual_split/
    done

}
# Check that dependencies (Platypus, tabix, bgzip, vcf-sort, Somatypus scripts) are installed
hash Platypus.py 2>/dev/null || { echo -e "\nERROR: Platypus.py: command not found. Please install Platypus and add its directory to your PATH.\n" >&2; exit 1; }    
hash tabix 2>/dev/null || { echo -e "\nERROR: tabix: command not found. Please install the SAMtools tabix package and add its directory to your PATH.\n" >&2; exit 1; } 
   
hash bgzip 2>/dev/null || { echo -e "\nERROR: bgzip: command not found. Please install the SAMtools tabix package and add its directory to your PATH.\n" >&2; exit 1; } 
   
hash vcf-sort 2>/dev/null || { echo -e "\nERROR: vcf-sort: command not found. Please install VCFtools and add its directory to your PATH.\n" >&2; exit 1; }    
hash Somatypus_SplitMA-MNVs.py 2>/dev/null || { echo -e "\nERROR: Somatypus directory not included in the PATH. Please add the somatypus/src directory to your PATH.\n" 
>&2; exit 1; }    



# If no arguments (or -h): print help
if [ "$#" -eq 0 ]; then
    print_help
    exit 0
fi


# Parse input
BAMSDIR=""
REFERENCE=""
REGIONS="no"
OUTDIR=""
CPUS=1
EXTRA=""
while getopts ":i:g:r:o:c:p:hv?" OPT; do
  case $OPT in
    i)
      BAMSDIR=$OPTARG
      ;;
    g)
      REFERENCE=$OPTARG
      ;;
    r)
      REGIONS=$OPTARG
      ;;
    o)
      OUTDIR=$OPTARG
      ;;
    c)
      CPUS=$OPTARG
      ;;
    p)
      EXTRA=$OPTARG
      ;;
    h)
      print_help
      exit 0
      ;;
    v)
      echo "Somatypus $VERSION"
      exit 0
      ;;
    \?)
      print_help
      echo -e "Invalid option: -$OPTARG\n" >&2
      exit 1
      ;;
  esac
done


# Check that all mandatory inputs are present
if [ -z "$BAMSDIR" ]; then
   print_help
   echo -e "Input BAM files folder (-i) is required\n" >&2
   exit 1
fi

if [ -z "$REFERENCE" ]; then
   print_help
   echo -e "Reference genome FASTA file (-g) is required\n" >&2
   exit 1
fi

if [ -z "$OUTDIR" ]; then
   print_help
   echo -e "Path to the output folder (-o) is required\n" >&2
   exit 1
fi


# Sanity checks: 
# Check that: Input files exist; FASTA is indexed; there are input BAMs; all BAMs are indexed; CPUS >0;
# extra Platypus options do not contain options used within the pipeline
if [ ! -s $REFERENCE ]; then
    echo -e "\nERROR: Reference FASTA file not found or empty. Please check the path.\n" >&2
    exit 1
fi

if [ ! -s ${REFERENCE}.fai ]; then
    echo -e "\nERROR: Reference FASTA file has no accompanying .fai index file. Please index the FASTA file using 'samtools faidx' or equivalent.\n" >&2
    exit 1
fi

if  [ "$REGIONS" != "no" ] && [ ! -s $REGIONS ]; then
    echo -e "\nERROR: Regions file not found or empty. Please check the path.\n" >&2
    exit 1
fi

if ! [[ $CPUS =~ ^[1-9]+[0-9]*$ ]]; then
    echo -e "\nERROR: Number of CPUs must be greater than 0\n" >&2
    exit 1
fi

if echo "$EXTRA" | grep -q -E "\-\-logFileName|\-\-refFile|\-\-bamFiles|\-\-regions|\-\-minPosterior|\-\-minReads|\-\-minFlank|\-\-trimReadFlank|\-\-source|\-\-getVaria
ntsFromBAMs|\-\-nCPU|\-\-output=|\-o " ; then 
    echo -e "\nERROR: Additional Platypus options cannot include --logFileName, --refFile, --bamFiles, --regions, --minPosterior, --minReads, --minFlank, --trimReadFlan
k, --source, --getVariantsFromBAMs, --nCPU, --output, or -o.\n" >&2
    exit 1
fi

if [ ! -d $BAMSDIR ]; then
    echo -e "\nERROR: $BAMSDIR directory not found. Please check the path.\n" >&2
    exit 1
fi

FILES=`ls -1 $BAMSDIR/*.bam 2> /dev/null | wc -l`
if [ "$FILES" -eq 0 ]; then
    echo -e "\nERROR: $BAMSDIR contains no files with .bam extension. Please check the path.\n" >&2
    exit 1
fi

for FILE in `ls $BAMSDIR/*.bam`; do
    if [ ! -s ${FILE}.bai ]; then
        echo -e "\nERROR: The file $FILE has no accompanying .bai index file. Please index the file using 'samtools sort' and 'samtools index' or equivalent.\n" >&2
        exit 1
    fi
done



# START RUNNING
# Copy all standard out and standard error to log file
mkdir -p $OUTDIR/logs
exec &> >(tee -ia $OUTDIR/logs/SOMATYPUS_`date +"%y%m%d%H%M"`.log)

echo -e "\nThis is somatypus-farm-1 $VERSION\n"

echo "Input BAMs directory:   $BAMSDIR"
echo "Input reference genome: $REFERENCE"
echo "Input regions file:     $REGIONS"
echo "Output directory:       $OUTDIR"
echo "Number of CPUs to use:  $CPUS"
if [ -z "$EXTRA" ]; then
    echo "Extra Platypus options: no"
else
    echo "Extra Platypus options: $EXTRA"
fi


# # Check if there is a checkpoint file from a previous run in the output folder
# STEP=0
# if [ -s $OUTDIR/logs/CHECKPOINT ]; then
#     CHK=`tail -1 $OUTDIR/logs/CHECKPOINT`
#     STEP=`echo $CHK | cut -f1 -d" "`
#     STEPNAME=`echo $CHK | cut -f2 -d" "`
#     echo -e "\n*CHECKPOINT FILE FOUND*"
#     echo -e "Resuming execution after last completed step: $STEPNAME"
# fi


echo -e "\nExecution started on `date`"


# 3. SPLIT INDIVIDUAL CALLS

echo -e "\n(3) SPLITTING MULTI-ALLELIC AND MNP CALLS"
split_calls
    
echo "3 split_calls" >> $OUTDIR/logs/CHECKPOINT

echo -e "\nsomatypus-farm-3 finished on `date`\n\n** Platypus jobs may still be running **\n"
