#!/bin/bash

# SOMATYPUS: A PLATYPUS-BASED VARIANT CALLING PIPELINE FOR CANCER DATA
# Adrian Baez-Ortega, Transmissible Cancer Group, University of Cambridge
# 2016

# somatypus
# Core pipeline script

# INPUT
# -i: path to folder containing the input BAM files (accompanied by BAI indices)
# -g: path to genome FASTA (must have FAI index)
# -o: path to global output folder
# -r: path to file of regions in chr:start-end format (optional)
# -c: number of CPUs (processes) for Platypus (*SHOULD NOT EXCEED 8 DUE TO BUG*) (optional)
# -e: extra options for Platypus (within quotes, separated by spaces) (optional)



VERSION=1.3


####################################### FUNCTIONS #######################################

# AUXILIARY FUNCTIONS
# print_help()
# Prints a help guide if -h, or no arguments, are input
print_help() {
    echo
    echo
    echo "| SOMATYPUS"
    echo "| A Platypus-based variant calling pipeline for cancer data"
    echo "| somatyups-farm-1 $VERSION"
    echo "|"    
    echo "| Required input:"
    echo "|    -i  Absolute path to folder containing the input BAM files (accompanied by BAI indices)."
    echo "|    -g  Absolute path to reference genome FASTA file (accompanied by FAI index)."
    echo "|    -o  Absolute path to the output folder (it will be created if needed)."
    echo "|"
    echo "| Optional input:"
    echo "|    -r  Absolute path to file of regions to use, one per line in CHR:START-END format."
    echo "|    -c  Number of CPUs (processes) for Platypus *(should not exceed 8 due to a bug)*."
    echo "|    -p  Additional options for Platypus, within quotes and separated by spaces."
    echo "|"
    echo "| Options:"
    echo "|    -h  Print this usage information and exit."
    echo "|    -v  Print version and exit."
    echo "|"
    echo "| Usage:"
    echo "|    somatyups-farm-1 -i /path/to/bams_dir -o /path/to/out_dir -g /path/to/genome.fna -r /path/to/regions.txt -c <1-8> -p \"--option=VAL --option=VAL\""
    echo
    echo
}


# check_file()
# Checks if a file exists and is not empty. In that case, it displays an error message and exits
# Used for checking the output of each step
check_file() {

    if [ ! -s $1 ]; then
        echo -e "\nERROR: Output file $1 was not correctly generated. Please check the logs folder for more information.\n" >&2
        exit 1
    fi
    
}


# PIPELINE STEPS
# 9-12) genotyping()
# Runs Platypus to genotype SNVs and indels obtained after individual calling and filtering
# INPUT: $1 - Number of the allele to be genotyped (1, 2 or 3; 0 means indels)
genotyping() {

    IND="$1"
    
    # If IND==0: genotype indels
    if [ "$IND" -eq 0 ]; then
    
        # If the user input a regions file: include the --regions argument
        REGIONSARG=""
        if [ "$REGIONS" != "no" ] || [ "$WINDOWS" != "no" ]; then
            REGIONSARG="--regions=$OUTDIR/8-18_genotyped/regions_indels.txt"
        fi

        # Run Platypus to genotype indels
        Platypus.py callVariants \
        --logFileName=$OUTDIR/logs/12.1_genotype_indels_first.log \
        --refFile=$REFERENCE \
        --bamFiles=$OUTDIR/8-18_genotyped/bam_list.txt \
        $REGIONSARG \
        --minPosterior=0 \
        --nCPU=$CPUS \
        --minReads=3 \
        --source=$OUTDIR/5-7_merged/MergedIndels.sorted.vcf.gz \
        --getVariantsFromBAMs=0 \
        $EXTRA \
        -o $OUTDIR/8-18_genotyped/GenotypedIndels_first.vcf

        # (Some calls may not be genotyped due to the way Platypus builds haplotypes)
        # Extract missing calls by comparing merged and genotyped VCFs
        tail -n +49 $OUTDIR/8-18_genotyped/GenotypedIndels_first.vcf | cut -f1,2,4,5 > $OUTDIR/geno_pos.txt
        cut -f1,2,4,5 $OUTDIR/5-7_merged/MergedIndels.vcf > $OUTDIR/merged_pos.txt
        grep -vxFf $OUTDIR/geno_pos.txt $OUTDIR/merged_pos.txt > $OUTDIR/coords.txt

        # Create a new regions file containing only the bases of the missing variants
        # The size of the region is the length of the SNV/indel
        awk '{if (length($3) >= length($4)) { print $1 ":" $2 "-" $2+length($3)-1 } else { print $1 ":" $2 "-" $2+length($4)-1 }}' $OUTDIR/coords.txt > $OUTDIR/8-18_genotyped/
varRegions_indels.txt
        Somatypus_MergeRegions.py $OUTDIR/8-18_genotyped/varRegions_indels.txt > $OUTDIR/logs/12.2_merge_indel_regions.log
        rm $OUTDIR/geno_pos.txt $OUTDIR/merged_pos.txt $OUTDIR/coords.txt

        # If there are missing calls: run Platypus to re-genotype them
        if [ -s $OUTDIR/8-18_genotyped/varRegions_indels_merged.txt ]; then
            echo -e "\nGenotyping missing calls in indels\n"
            Platypus.py callVariants \
            --logFileName=$OUTDIR/logs/12.3_genotype_indels_second.log \
            --refFile=$REFERENCE \
            --bamFiles=$OUTDIR/8-18_genotyped/bam_list.txt \
            --regions=$OUTDIR/8-18_genotyped/varRegions_indels_merged.txt \
            --minPosterior=0 \
            --nCPU=$CPUS \
            --minReads=3 \
            --source=$OUTDIR/5-7_merged/MergedIndels.sorted.vcf.gz \
            --getVariantsFromBAMs=0 \
            $EXTRA \
            -o $OUTDIR/8-18_genotyped/GenotypedIndels_second.vcf
        else
            echo -e "\nNo missing calls"
        fi
        
    # SNV genotyping (allele $IND) 
    else

        # If the user input a regions file: include the --regions argument
        REGIONSARG=""
        if [ "$REGIONS" != "no" ] || [ "$WINDOWS" != "no" ]; then
            REGIONSARG="--regions=$OUTDIR/8-18_genotyped/regions_allele${IND}.txt"
        fi

        # Run Platypus to genotype the specified allele
        Platypus.py callVariants \
        --logFileName=$OUTDIR/logs/$(( 8 + $IND )).1_genotype_allele${IND}_first.log \
        --refFile=$REFERENCE \
        --bamFiles=$OUTDIR/8-18_genotyped/bam_list.txt \
        $REGIONSARG \
        --minPosterior=0 \
        --nCPU=$CPUS \
        --minReads=3 \
        --source=$OUTDIR/5-7_merged/MergedSNVs_allele${IND}.sorted.vcf.gz \
        --getVariantsFromBAMs=0 \
        $EXTRA \
        -o $OUTDIR/8-18_genotyped/GenotypedSNVs_allele${IND}_first.vcf

        # (Some calls may not be genotyped due to the way Platypus builds haplotypes)
        # Extract missing calls by comparing merged and genotyped VCFs
        tail -n +49 $OUTDIR/8-18_genotyped/GenotypedSNVs_allele${IND}_first.vcf | cut -f1,2,4,5 > $OUTDIR/geno_pos.txt
        cut -f1,2,4,5 $OUTDIR/5-7_merged/MergedSNVs_allele${IND}.vcf > $OUTDIR/merged_pos.txt
        grep -vxFf $OUTDIR/geno_pos.txt $OUTDIR/merged_pos.txt > $OUTDIR/coords.txt

        # Create a new regions file containing only the bases of the missing variants
        # The size of the region is the length of the SNV/indel
        awk '{if (length($3) >= length($4)) { print $1 ":" $2 "-" $2+length($3)-1 } else { print $1 ":" $2 "-" $2+length($4)-1 }}' $OUTDIR/coords.txt > $OUTDIR/8-18_genotyped/
varRegions_allele${IND}.txt
        rm $OUTDIR/geno_pos.txt $OUTDIR/merged_pos.txt $OUTDIR/coords.txt

        # If there are missing calls: run Platypus to re-genotype them
        if [ -s $OUTDIR/8-18_genotyped/varRegions_allele${IND}.txt ]; then
            echo -e "\nGenotyping missing calls in allele $IND\n"
            Platypus.py callVariants \
            --logFileName=$OUTDIR/logs/$(( 8 + $IND )).2_genotype_allele${IND}_second.log \
            --refFile=$REFERENCE \
            --bamFiles=$OUTDIR/8-18_genotyped/bam_list.txt \
            --regions=$OUTDIR/8-18_genotyped/varRegions_allele${IND}.txt \
            --minPosterior=0 \
            --nCPU=$CPUS \
            --minReads=3 \
            --source=$OUTDIR/5-7_merged/MergedSNVs_allele${IND}.sorted.vcf.gz \
            --getVariantsFromBAMs=0 \
            $EXTRA \
            -o $OUTDIR/8-18_genotyped/GenotypedSNVs_allele${IND}_second.vcf
        else
            echo -e "\nNo missing calls"
        fi
    fi
}

################################### END OF FUNCTIONS ####################################


# Check that dependencies (Platypus, tabix, bgzip, vcf-sort, Somatypus scripts) are installed
hash Platypus.py 2>/dev/null || { echo -e "\nERROR: Platypus.py: command not found. Please install Platypus and add its directory to your PATH.\n" >&2; exit 1; }    
hash tabix 2>/dev/null || { echo -e "\nERROR: tabix: command not found. Please install the SAMtools tabix package and add its directory to your PATH.\n" >&2; exit 1; }    
hash bgzip 2>/dev/null || { echo -e "\nERROR: bgzip: command not found. Please install the SAMtools tabix package and add its directory to your PATH.\n" >&2; exit 1; }    
hash vcf-sort 2>/dev/null || { echo -e "\nERROR: vcf-sort: command not found. Please install VCFtools and add its directory to your PATH.\n" >&2; exit 1; }    
hash Somatypus_SplitMA-MNVs.py 2>/dev/null || { echo -e "\nERROR: Somatypus directory not included in the PATH. Please add the somatypus/src directory to your PATH.\n" >&2; ex
it 1; }    



# If no arguments (or -h): print help
if [ "$#" -eq 0 ]; then
    print_help
    exit 0
fi


# Parse input
BAMSDIR=""
REFERENCE=""
REGIONS="no"
OUTDIR=""
CPUS=1
EXTRA=""
while getopts ":i:g:r:o:c:p:hv?" OPT; do
  case $OPT in
    i)
      BAMSDIR=$OPTARG
      ;;
    g)
      REFERENCE=$OPTARG
      ;;
    r)
      REGIONS=$OPTARG
      ;;
    o)
      OUTDIR=$OPTARG
      ;;
    c)
      CPUS=$OPTARG
      ;;
    p)
      EXTRA=$OPTARG
      ;;
    h)
      print_help
      exit 0
      ;;
    v)
      echo "Somatypus $VERSION"
      exit 0
      ;;
    \?)
      print_help
      echo -e "Invalid option: -$OPTARG\n" >&2
      exit 1
      ;;
  esac
done


# Check that all mandatory inputs are present
if [ -z "$BAMSDIR" ]; then
   print_help
   echo -e "Input BAM files folder (-i) is required\n" >&2
   exit 1
fi

if [ -z "$REFERENCE" ]; then
   print_help
   echo -e "Reference genome FASTA file (-g) is required\n" >&2
   exit 1
fi

if [ -z "$OUTDIR" ]; then
   print_help
   echo -e "Path to the output folder (-o) is required\n" >&2
   exit 1
fi


# Sanity checks: 
# Check that: Input files exist; FASTA is indexed; there are input BAMs; all BAMs are indexed; CPUS >0;
# extra Platypus options do not contain options used within the pipeline
if [ ! -s $REFERENCE ]; then
    echo -e "\nERROR: Reference FASTA file not found or empty. Please check the path.\n" >&2
    exit 1
fi

if [ ! -s ${REFERENCE}.fai ]; then
    echo -e "\nERROR: Reference FASTA file has no accompanying .fai index file. Please index the FASTA file using 'samtools faidx' or equivalent.\n" >&2
    exit 1
fi

if  [ "$REGIONS" != "no" ] && [ ! -s $REGIONS ]; then
    echo -e "\nERROR: Regions file not found or empty. Please check the path.\n" >&2
    exit 1
fi

if ! [[ $CPUS =~ ^[1-9]+[0-9]*$ ]]; then
    echo -e "\nERROR: Number of CPUs must be greater than 0\n" >&2
    exit 1
fi

if echo "$EXTRA" | grep -q -E "\-\-logFileName|\-\-refFile|\-\-bamFiles|\-\-regions|\-\-minPosterior|\-\-minReads|\-\-minFlank|\-\-trimReadFlank|\-\-source|\-\-getVariantsFrom
BAMs|\-\-nCPU|\-\-output=|\-o " ; then 
    echo -e "\nERROR: Additional Platypus options cannot include --logFileName, --refFile, --bamFiles, --regions, --minPosterior, --minReads, --minFlank, --trimReadFlank, --so
urce, --getVariantsFromBAMs, --nCPU, --output, or -o.\n" >&2
    exit 1
fi

if [ ! -d $BAMSDIR ]; then
    echo -e "\nERROR: $BAMSDIR directory not found. Please check the path.\n" >&2
    exit 1
fi

FILES=`ls -1 $BAMSDIR/*.bam 2> /dev/null | wc -l`
if [ "$FILES" -eq 0 ]; then
    echo -e "\nERROR: $BAMSDIR contains no files with .bam extension. Please check the path.\n" >&2
    exit 1
fi

for FILE in `ls $BAMSDIR/*.bam`; do
    if [ ! -s ${FILE}.bai ]; then
        echo -e "\nERROR: The file $FILE has no accompanying .bai index file. Please index the file using 'samtools sort' and 'samtools index' or equivalent.\n" >&2
        exit 1
    fi
done



# START RUNNING
# Copy all standard out and standard error to log file
mkdir -p $OUTDIR/logs
exec &> >(tee -ia $OUTDIR/logs/SOMATYPUS_`date +"%y%m%d%H%M"`.log)

echo -e "\nThis is somatypus-farm-1 $VERSION\n"

echo "Input BAMs directory:   $BAMSDIR"
echo "Input reference genome: $REFERENCE"
echo "Input regions file:     $REGIONS"
echo "Output directory:       $OUTDIR"
echo "Number of CPUs to use:  $CPUS"
if [ -z "$EXTRA" ]; then
    echo "Extra Platypus options: no"
else
    echo "Extra Platypus options: $EXTRA"
fi


# # Check if there is a checkpoint file from a previous run in the output folder
# STEP=0
# if [ -s $OUTDIR/logs/CHECKPOINT ]; then
#     CHK=`tail -1 $OUTDIR/logs/CHECKPOINT`
#     STEP=`echo $CHK | cut -f1 -d" "`
#     STEPNAME=`echo $CHK | cut -f2 -d" "`
#     echo -e "\n*CHECKPOINT FILE FOUND*"
#     echo -e "Resuming execution after last completed step: $STEPNAME"
# fi


echo -e "\nExecution started on `date`"


# GENOTYPE ALLELE 1/2/3 SNVS
mkdir $OUTDIR/logs/8-18_genotyped
for ALL in `seq 1 3`; do
   # if [ "$STEP" -lt $(( 8 + $ALL )) ]; then
   
        echo -e "\n($(( 8 + $ALL ))) GENOTYPING 'ALLELE ${ALL}' SNVS\n"
        bsub -o $OUTDIR/logs/8-18_genotyped/log.%J \
              -e $OUTDIR/logs/8-18_genotyped/err.%J \
              -q long \
              -n $CPUS \
              -R 'span[hosts=1] select[mem>=40000] rusage[mem=40000]' -M40000 \
       "genotyping $ALL"

        # Update checkpoint file
        echo "$(( 8 + $ALL )) genotyping_allele$ALL" >> $OUTDIR/logs/CHECKPOINT

done

echo -e "\n(12) GENOTYPING INDELS\n"
    if [ -s $OUTDIR/5-7_merged/MergedIndels.vcf ]; then
      bsub -o $OUTDIR/logs/8-18_genotyped/log.%J \
              -e $OUTDIR/logs/8-18_genotyped/err.%J \
              -q long \
              -n $CPUS \
              -R 'span[hosts=1] select[mem>=40000] rusage[mem=40000]' -M40000 \
        "genotyping 0"    
    fi

    # Update checkpoint file
    echo -e "\nSuccess"
    echo "12 genotyping_indels" >> $OUTDIR/logs/CHECKPOINT
echo -e "\nsomatypus-farm-1 finished on `date`\n\n** Platypus jobs may still be running **\n"
